declare const HID_ck = "\nglobal Event _msg;\n            \nglobal Event _hid;\nglobal int _hidMultiple;\n0 => global int _cursorX;\n0 => global int _cursorY;\n\n0 => global float _deltaX;\n0 => global float _deltaY;\n\nglobal string _key;\nglobal int _isDown;\nglobal int _isUp;\nglobal int _isMouseDown;\nglobal int _isMouseUp;\nglobal int _isScroll;\nglobal int _ascii;\nglobal int _which;\nglobal int _mouseActive;\nglobal int _kbdActive;\nglobal int _mouseMotion;\nglobal float _scaledCursorX;\nglobal float _scaledCursorY;\n\npublic class HidMsg {\n    int cursorX;\n    int cursorY;\n    float deltaX;\n    float deltaY;\n    string key;\n    int ascii;\n    int which;\n    float scaledCursorX;\n    float scaledCursorY;\n\n    function int isButtonDown() {\n        if(_mouseActive){\n            if(_isMouseDown){\n                0 => _isMouseDown;\n                return 1;\n            }\n        }\n        if(_kbdActive){\n            if(_isDown){\n                0 => _isDown;\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    function int isButtonUp() {\n        if(_mouseActive){\n            if(_isMouseUp){\n                0 => _isMouseUp;\n                return 1;\n            }\n        }\n        if(_kbdActive){\n            if(_isUp){\n                0 => _isUp;\n                return 1;\n            }\n        }\n        return 0;\n    }\n\n    function int isMouseMotion(){\n        return _mouseMotion;\n    }\n\n    function int isWheelMotion(){\n        return _isScroll;\n    }\n\n    function void _set(){\n        while(true){\n            _hid => now;\n            _cursorX => cursorX;\n            _cursorY => cursorY;\n            _key => key;\n            _ascii => ascii;\n            _which => which;\n            _deltaX => deltaX;\n            _deltaY => deltaY;\n            _scaledCursorX => scaledCursorX;\n            _scaledCursorY => scaledCursorY;\n        }\n    }\n    spork~_set();\n}\n";
declare const HidMsg_ck = "\nglobal Event _msg;\n\nglobal Event _hid;\nglobal int _hidMultiple;\nglobal int _cursorX;\nglobal int _cursorY;\n\nglobal float _deltaX;\nglobal float _deltaY;\n\nglobal string _key;\nglobal int _isDown;\nglobal int _isUp;\nglobal int _isMouseDown;\nglobal int _isMouseUp;\nglobal int _isScroll;\nglobal int _ascii;\nglobal int _which;\nglobal int _mouseActive;\nglobal int _kbdActive;\nglobal int _mouseMotion;\nglobal float _scaledCursorX;\nglobal float _scaledCursorY;\n\npublic class Hid extends Event{\n\n    0 => int isMouseOpen;\n    0 => int isKBDOpen;\n    0 => int active;\n\n    string deviceName; \n\n    function string name(){\n        return deviceName;\n    }\n\n    // just a way to stop the interface for now\n    function int openMouse(int num){\n        if(num == -1){\n            false => active;\n        } else {\n            \"virtualJS mouse/trackpad\" => deviceName;\n            true => active;\n        }\n        active => isMouseOpen => _mouseActive;;\n        return active;\n    }\n\n    function int openKeyboard(int num){\n        if(num == -1){\n            false => active => _kbdActive;\n        } else {\n            \"virtualJS keyboard\" => deviceName;\n            true => active ;\n        }\n        active => isKBDOpen => _kbdActive;\n        return active;\n    }\n\n    // Global event gets hacked by local object\n    function void _hackEvent(){\n        while(true){\n            _hid => now;\n            this.broadcast();\n        }\n    }\n    spork~_hackEvent();\n\n    //The argument here is just to execute older code\n    function int recv(HidMsg msg){\n        _msg => now;\n        return 1;\n    }\n}\n";
export { HidMsg_ck, HID_ck };
